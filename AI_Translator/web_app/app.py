from flask import Flask, request, jsonify, send_file, render_template
from gtts import gTTS
import tempfile
import os
from llm_translate import llm_translate
from mymemory_translate import mymemory_translate

app = Flask(__name__, template_folder="templates", static_folder="static")

lang_map = {
    "English ğŸ‡¬ğŸ‡§": "en",
    "Hindi ğŸ‡®ğŸ‡³": "hi",
    "Marathi ğŸ‡®ğŸ‡³": "mr",
    "Tamil ğŸ‡®ğŸ‡³": "ta",
    "Telugu ğŸ‡®ğŸ‡³": "te",
    "Bengali ğŸ‡®ğŸ‡³": "bn",
    "Gujarati ğŸ‡®ğŸ‡³": "gu",
    "Kannada ğŸ‡®ğŸ‡³": "kn",
    "Malayalam ğŸ‡®ğŸ‡³": "ml",
    "Punjabi ğŸ‡®ğŸ‡³": "pa",
    "Urdu ğŸ‡®ğŸ‡³": "ur",
    "Spanish ğŸ‡ªğŸ‡¸": "Spanish",
    "French ğŸ‡«ğŸ‡·": "French",
    "German ğŸ‡©ğŸ‡ª": "German",
    "Italian ğŸ‡®ğŸ‡¹": "Italian",
    "Chinese ğŸ‡¨ğŸ‡³": "Simplified Chinese",
    "Japanese ğŸ‡¯ğŸ‡µ": "Japanese"
}

code_map = {
    "English ğŸ‡¬ğŸ‡§": "en",
    "Hindi ğŸ‡®ğŸ‡³": "hi",
    "Marathi ğŸ‡®ğŸ‡³": "mr-IN",
    "Tamil ğŸ‡®ğŸ‡³": "ta-IN",
    "Telugu ğŸ‡®ğŸ‡³": "te-IN",
    "Bengali ğŸ‡®ğŸ‡³": "bn-IN",
    "Gujarati ğŸ‡®ğŸ‡³": "gu-IN",
    "Kannada ğŸ‡®ğŸ‡³": "kn-IN",
    "Malayalam ğŸ‡®ğŸ‡³": "ml-IN",
    "Punjabi ğŸ‡®ğŸ‡³": "pa-IN",
    "Urdu ğŸ‡®ğŸ‡³": "ur-IN",
    "Spanish ğŸ‡ªğŸ‡¸": "es",
    "French ğŸ‡«ğŸ‡·": "fr",
    "German ğŸ‡©ğŸ‡ª": "de",
    "Italian ğŸ‡®ğŸ‡¹": "it",
    "Chinese ğŸ‡¨ğŸ‡³": "zh",
    "Japanese ğŸ‡¯ğŸ‡µ": "ja"
}

@app.route("/")
def index():
    return render_template("index.html")


@app.route("/translate", methods=["POST"])
def translate():
    try:
        data = request.json
        text = str(data.get("text", "")).strip()
        src = lang_map.get(data.get("src"), "English")
        tgt = lang_map.get(data.get("tgt"), "English")

        if not text:
            return jsonify({"translated": "Error: No input text provided."})

        # Clean and simple LLM prompt (no tone/gender)
        prompt = (
            f"Translate the following text from {src} to {tgt}. "
            f"Output should be fully in {tgt} only. "
            f"Do not include any words from {src}.\n\n"
            f"Text:\n{text}"
        )

        try:
            result = llm_translate(prompt)
        except Exception as e:
            # Fallback to MyMemory
            src_code = code_map.get(data.get("src"), "en")
            tgt_code = code_map.get(data.get("tgt"), "en")
            result = mymemory_translate(text, src_code, tgt_code)

        return jsonify({"translated": result})

    except Exception as e:
        return jsonify({"translated": f"Error: {str(e)}"})


@app.route("/speak", methods=["POST"])
def speak():
    try:
        data = request.json
        text = data.get("text", "").strip()
        lang = data.get("lang", "en")

        if not text:
            return "TTS failed: No text to speak.", 400

        if "zh" in lang:
            lang = "zh"

        tts = gTTS(text=text, lang=lang)
        path = os.path.join(tempfile.gettempdir(), "tts_output.mp3")
        tts.save(path)

        return send_file(path, mimetype="audio/mpeg")

    except Exception as e:
        return f"TTS failed: {str(e)}", 500


if __name__ == "__main__":
    app.run(debug=True)